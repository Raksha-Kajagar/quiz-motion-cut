import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

public class LinkShortener {
    private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static final int SHORT_CODE_LENGTH = 6;

    private static Map<String, String> urlShortenerMap = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nLink Shortener Menu:");
            System.out.println("1. Shorten a URL");
            System.out.println("2. Resolve a Short Code");
            System.out.println("3. Exit");
            System.out.print("Choose an option (1-3): ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    shortenURL(scanner);
                    break;
                case 2:
                    resolveShortCode(scanner);
                    break;
                case 3:
                    System.out.println("Exiting Link Shortener. Goodbye!");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please choose a valid option (1-3).");
            }
        }
    }

    private static void shortenURL(Scanner scanner) {
        System.out.print("Enter the URL to shorten: ");
        String originalURL = scanner.nextLine();

        String shortCode = generateShortCode();
        urlShortenerMap.put(shortCode, originalURL);

        System.out.println("Shortened URL: http://short.url/" + shortCode);
    }

    private static void resolveShortCode(Scanner scanner) {
        System.out.print("Enter the short code: ");
        String shortCode = scanner.nextLine();

        if (urlShortenerMap.containsKey(shortCode)) {
            String originalURL = urlShortenerMap.get(shortCode);
            System.out.println("Original URL: " + originalURL);
        } else {
            System.out.println("Invalid short code. URL not found.");
        }
    }

    private static String generateShortCode() {
        StringBuilder shortCode = new StringBuilder();
        Random random = new Random();

        for (int i = 0; i < SHORT_CODE_LENGTH; i++) {
            int index = random.nextInt(ALPHABET.length());
            shortCode.append(ALPHABET.charAt(index));
        }

        return shortCode.toString();
    }
}
